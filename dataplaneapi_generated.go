// Code generated by go generate; DO NOT EDIT.
// Copyright 2021 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dataplaneapi

import (
	"github.com/haproxytech/dataplaneapi/configuration"
	"github.com/haproxytech/dataplaneapi/misc"
)

func SyncWithFileSettings(server *Server, cfg *configuration.Configuration) {
	configStorage := cfg.GetStorageData()
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.EnabledListeners != nil && !misc.HasOSArg("", "scheme", "") {
		server.EnabledListeners = *configStorage.Dataplaneapi.EnabledListeners
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.CleanupTimeout != nil && !misc.HasOSArg("", "cleanup-timeout", "") {
		server.CleanupTimeout = *configStorage.Dataplaneapi.CleanupTimeout
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.GracefulTimeout != nil && !misc.HasOSArg("", "graceful-timeout", "") {
		server.GracefulTimeout = *configStorage.Dataplaneapi.GracefulTimeout
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.MaxHeaderSize != nil && !misc.HasOSArg("", "max-header-size", "") {
		server.MaxHeaderSize = *configStorage.Dataplaneapi.MaxHeaderSize
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.SocketPath != nil && !misc.HasOSArg("", "socket-path", "") {
		server.SocketPath = *configStorage.Dataplaneapi.SocketPath
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Host != nil && !misc.HasOSArg("", "host", "HOST") {
		server.Host = *configStorage.Dataplaneapi.Host
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Port != nil && !misc.HasOSArg("", "port", "PORT") {
		server.Port = *configStorage.Dataplaneapi.Port
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.ListenLimit != nil && !misc.HasOSArg("", "listen-limit", "") {
		server.ListenLimit = *configStorage.Dataplaneapi.ListenLimit
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.KeepAlive != nil && !misc.HasOSArg("", "keep-alive", "") {
		server.KeepAlive = *configStorage.Dataplaneapi.KeepAlive
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.ReadTimeout != nil && !misc.HasOSArg("", "read-timeout", "") {
		server.ReadTimeout = *configStorage.Dataplaneapi.ReadTimeout
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.WriteTimeout != nil && !misc.HasOSArg("", "write-timeout", "") {
		server.WriteTimeout = *configStorage.Dataplaneapi.WriteTimeout
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSHost != nil && !misc.HasOSArg("", "tls-host", "TLS_HOST") {
		server.TLSHost = *configStorage.Dataplaneapi.Tls.TLSHost
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSPort != nil && !misc.HasOSArg("", "tls-port", "TLS_PORT") {
		server.TLSPort = *configStorage.Dataplaneapi.Tls.TLSPort
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSCertificate != nil && !misc.HasOSArg("", "tls-certificate", "TLS_CERTIFICATE") {
		server.TLSCertificate = *configStorage.Dataplaneapi.Tls.TLSCertificate
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSCertificateKey != nil && !misc.HasOSArg("", "tls-key", "TLS_PRIVATE_KEY") {
		server.TLSCertificateKey = *configStorage.Dataplaneapi.Tls.TLSCertificateKey
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSCACertificate != nil && !misc.HasOSArg("", "tls-ca", "TLS_CA_CERTIFICATE") {
		server.TLSCACertificate = *configStorage.Dataplaneapi.Tls.TLSCACertificate
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSListenLimit != nil && !misc.HasOSArg("", "tls-listen-limit", "") {
		server.TLSListenLimit = *configStorage.Dataplaneapi.Tls.TLSListenLimit
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSKeepAlive != nil && !misc.HasOSArg("", "tls-keep-alive", "") {
		server.TLSKeepAlive = *configStorage.Dataplaneapi.Tls.TLSKeepAlive
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSReadTimeout != nil && !misc.HasOSArg("", "tls-read-timeout", "") {
		server.TLSReadTimeout = *configStorage.Dataplaneapi.Tls.TLSReadTimeout
	}
	if configStorage.Dataplaneapi != nil && configStorage.Dataplaneapi.Tls != nil && configStorage.Dataplaneapi.Tls.TLSWriteTimeout != nil && !misc.HasOSArg("", "tls-write-timeout", "") {
		server.TLSWriteTimeout = *configStorage.Dataplaneapi.Tls.TLSWriteTimeout
	}
}
